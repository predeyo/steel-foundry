{"ast":null,"code":"var _jsxFileName = \"/home/zen/projects/steel-foundry/src/components/sing-in/sign-in.component.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport FormInput from \"../form-input/form-input.component.jsx\";\nimport CustomButton from \"../custom-button/custom-button.component.jsx\";\nimport { auth, signInWithGoogle } from \"../../firebase/firebase.utils.js\";\nimport { googleSignInStart } from \"../../redux/user/user.actions.js\";\nimport \"./sign-in.styles.scss\";\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const _this$state = this.state,\n            email = _this$state.email,\n            password = _this$state.password;\n\n      try {\n        await auth.signInWithEmailAndPassword(email, password);\n        this.setState({\n          email: \"\",\n          password: \"\"\n        });\n      } catch (error) {\n        console.error(\"Unable to sing in with email and password\");\n      }\n    };\n\n    this.handleChange = e => {\n      const _e$target = e.target,\n            value = _e$target.value,\n            name = _e$target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n  }\n\n  render() {\n    const googleSignInStart = this.props.googleSignInStart;\n    return React.createElement(\"div\", {\n      className: \"sign-in\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"I already have an account\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Sing in with your email and password\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(FormInput, {\n      type: \"email\",\n      value: this.state.email,\n      name: \"email\",\n      handleChange: this.handleChange,\n      label: \"email\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(FormInput, {\n      type: \"password\",\n      value: this.state.password,\n      name: \"password\",\n      handleChange: this.handleChange,\n      required: true,\n      label: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \" Sign in \"), React.createElement(CustomButton, {\n      onClick: () => googleSignInStart(),\n      isGoogleSignIn: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \" \", \"Sign in with Google\", \" \"))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: dispatch(googleSignInStart())\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/home/zen/projects/steel-foundry/src/components/sing-in/sign-in.component.jsx"],"names":["React","connect","FormInput","CustomButton","auth","signInWithGoogle","googleSignInStart","SignIn","Component","constructor","props","handleSubmit","event","preventDefault","state","email","password","signInWithEmailAndPassword","setState","error","console","handleChange","e","target","value","name","render","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport FormInput from \"../form-input/form-input.component.jsx\";\nimport CustomButton from \"../custom-button/custom-button.component.jsx\";\n\nimport { auth, signInWithGoogle } from \"../../firebase/firebase.utils.js\";\n\nimport { googleSignInStart } from \"../../redux/user/user.actions.js\";\n\nimport \"./sign-in.styles.scss\";\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n  }\n\n  handleSubmit = async event => {\n    event.preventDefault();\n\n    const { email, password } = this.state;\n\n    try {\n      await auth.signInWithEmailAndPassword(email, password);\n\n      this.setState({ email: \"\", password: \"\" });\n    } catch (error) {\n      console.error(\"Unable to sing in with email and password\");\n    }\n  };\n\n  handleChange = e => {\n    const { value, name } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  render() {\n    const { googleSignInStart } = this.props;\n    return (\n      <div className=\"sign-in\">\n        <h2>I already have an account</h2>\n        <span>Sing in with your email and password</span>\n        <form onSubmit={this.handleSubmit}>\n          <FormInput\n            type=\"email\"\n            value={this.state.email}\n            name=\"email\"\n            handleChange={this.handleChange}\n            label=\"email\"\n            required\n          />\n          <FormInput\n            type=\"password\"\n            value={this.state.password}\n            name=\"password\"\n            handleChange={this.handleChange}\n            required\n            label=\"password\"\n          />\n          <div className=\"buttons\">\n            <CustomButton type=\"submit\"> Sign in </CustomButton>\n            <CustomButton onClick={() => googleSignInStart()} isGoogleSignIn>\n              {\" \"}\n              Sign in with Google{\" \"}\n            </CustomButton>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: dispatch(googleSignInStart())\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SignIn);\n"]},"metadata":{},"sourceType":"module"}